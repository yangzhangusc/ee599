
#include "network.h"

Network::Network(){
    head = NULL;
    tail = NULL;
    count = 0;
}


Network::~Network(){
    // Destructure delete all the Connections
    // TODO: Complete this method
  delete head;
  delete tail;
  
}


void Network::push_front(Connection* newEntry){
    // Adds a new Connection (newEntry) to the front of LL
  
    newEntry->prev = NULL;
    newEntry->next = head;

    if (head != NULL)
        head->prev = newEntry;
    else
        tail = newEntry;
    
    head = newEntry;
    count++;
}


void Network::push_back(Connection* newEntry){
    // Adds a new Connection (newEntry) to the back of LL
    //TODO: Complete this method!
  newEntry->next=NULL;
  if (head == NULL)
  {
    newEntry->prev=NULL;
    head = newEntry;
    tail = newEntry;
    
  }
  else
    {
      Connection *ptr=tail;
      ptr->next=newEntry;
      newEntry->prev=ptr;
      tail = newEntry;
    }
  count++;

}


Connection* Network::search(Connection* searchEntry){
    // Searches the Network for searchEntry
    // Use == overloaded operator for connection
    // if found, returns a pointer to it, else returns NULL
    // TODO: Complete this method!
  if(head == NULL)
    return NULL;
  else{
  Connection *ptr=head;
  while(ptr->operator!=(*searchEntry))
    { if(ptr->next != NULL)
        ptr=ptr->next;
      else
	return NULL;
      
    }
  return ptr;
    }
  
}


void Network::printDB(){
    cout << "Number of connections: " << count << endl;
    Connection* ptr = head;
    while(ptr != NULL){
        ptr->print_connection();
        cout << "------------------" << endl;
        ptr = ptr->next;
    }
}


void Network::saveDB(string filename){
    // Saves the netwrok in file <filename>
    // The format of the output file is similar to printDB()
    // Look at networkDB.txt as a template
    // TODO: Complete this method
    // TODO: Understand why it would be necessary to modify Date class now! 
    // TODO: Go back and uncomment get_date method in Date class (both .h and .cpp)
  Connection* ptr =head;
  ofstream outfile(filename.c_str());
  string fname,lname,bdate;
  while(ptr != NULL){
    fname=ptr->get_f_name();
    
    lname=ptr->get_l_name();
    bdate=ptr->get_birthdate();
    outfile<<lname<<", "<<fname<<endl;
    outfile<<bdate<<endl;
    outfile<<"--------------------"<<endl;
    ptr=ptr->next;
    
  }
  
}


void Network::loadDB(string filename){
    // Loads the netwrok from file <filename>
    // The format of the input file is similar to saveDB
    // Look at network networkDB.txt as a template
    // The order of connections in LL does not matter
    // TODO: Understand this code! 

    Connection* ptr = head;
    while(head != NULL){
        ptr = head->next;
        delete head;
        head = ptr;
        count--;
    }
    head = NULL;
    tail = NULL;
    ifstream infile;
    infile.open(filename.c_str());
    string buff, fname, lname, bdate;
    while(getline(infile, buff)){
        lname = buff.substr(0, buff.find(','));
        fname = buff.substr(buff.find(',')+2);
        getline(infile, bdate);
        getline(infile, buff);
        Connection* newEntry = new Connection(fname, lname, bdate);
        this->push_back(newEntry);
    }
}


bool Network::remove(string fname, string lname, string bdate){
    // TODO: Complete this method! Follow these steps:
    // Create a new connection with the the give arguments ..
    // .. think about what Connection constructor will be helpful with these arguments 
    // Search if this connection exists using search method
    // If it does not exist just return false!
    // Else, remove the connection from LL, make the other connections connected
    // Don't forget to delete allocated memory, change count  and returning values!
  Connection* oldEntry=new Connection(fname,lname,bdate);
  Connection* old_ptr=this->search(oldEntry);
  Connection* temp1;
  Connection* temp2;
  
  if(head == NULL)
    return false;
  else
    {
      if(old_ptr == NULL)
	return false;
      else
	{
	  if(old_ptr == head)
	    {
	      temp1=head->next;
	      temp1->prev=NULL;
	      delete head;
	      head=temp1;
	      
	      
	    }
	  else  if(old_ptr == tail)
	    {
	      temp1=tail->prev;
	      temp1->next=NULL;
		delete tail;
	      tail=temp1;
	    }
	  else
	    {
	   
	   temp1=old_ptr->prev;
	  temp2=old_ptr->next;
	  temp1->next=temp2;
	  temp2->prev=temp1;
	  
	  
	  delete oldEntry;
	  
	    }
	  count=count-1;
	  return true;
	  
	  
	  
	}
	}
}

